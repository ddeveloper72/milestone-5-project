name: Django CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # Don't cancel other jobs if one fails
      max-parallel: 4
      matrix:
        python-version: ["3.10", "3.11"]  # Removed 3.12 temporarily

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client libpq-dev python3-dev build-essential
    
    - name: Upgrade pip and install wheel
      run: |
        python -m pip install --upgrade pip wheel setuptools
    
    - name: Install dependencies with error handling
      run: |
        # Install core dependencies first
        pip install Django==4.2.16
        pip install psycopg2-binary
        pip install gunicorn
        
        # Try CI-specific requirements first, fallback to main requirements
        if [ -f requirements-ci.txt ]; then
          echo "Installing CI-optimized requirements..."
          pip install -r requirements-ci.txt || echo "CI requirements failed, trying main requirements..."
        fi
        
        # Fallback to main requirements, skipping problematic packages
        pip install -r requirements.txt || echo "Some packages failed to install, continuing..."
        
    - name: Set up environment variables
      run: |
        echo "SECRET_KEY=test-secret-key-for-ci-very-long-and-secure-key-123456789" >> $GITHUB_ENV
        echo "DEBUG=True" >> $GITHUB_ENV
        echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
        echo "AWS_ACCESS_KEY_ID=test" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=test" >> $GITHUB_ENV
        echo "AWS_STORAGE_BUCKET_NAME=test" >> $GITHUB_ENV
        echo "AWS_S3_REGION_NAME=us-east-1" >> $GITHUB_ENV
        echo "USE_S3=False" >> $GITHUB_ENV
        echo "STRIPE_PUBLISHABLE=test" >> $GITHUB_ENV
        echo "STRIPE_SECRET=test" >> $GITHUB_ENV
        echo "EMAIL_ADDRESS=test@example.com" >> $GITHUB_ENV
        echo "EMAIL_PASSWORD=test" >> $GITHUB_ENV
        echo "MYSQL_DATABASE=test" >> $GITHUB_ENV
        echo "MYSQL_USER=test" >> $GITHUB_ENV
        echo "MYSQL_PASSWORD=test" >> $GITHUB_ENV
        echo "MYSQL_HOST=localhost" >> $GITHUB_ENV
        echo "MYSQL_PORT=3306" >> $GITHUB_ENV
        
    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        
    - name: Debug environment
      run: |
        echo "Python version: $(python --version)"
        echo "Pip version: $(pip --version)"
        echo "Django version: $(python -c 'import django; print(django.get_version())' || echo 'Django not available')"
        echo "DATABASE_URL: $DATABASE_URL"
        echo "Installed packages:"
        pip list | grep -E "(Django|psycopg2|gunicorn)" || echo "Core packages not found"
        
    - name: Run Django system checks
      run: |
        python manage.py check --settings=drone_debug.settings --verbosity=2
        
    - name: Run migrations
      run: |
        python manage.py migrate --settings=drone_debug.settings --verbosity=2
        
    - name: Create test superuser
      run: |
        python manage.py shell --settings=drone_debug.settings -c "
        from django.contrib.auth.models import User;
        User.objects.filter(username='testuser').delete();
        User.objects.create_superuser('testuser', 'test@example.com', 'testpass123')
        " || echo "Superuser creation failed, continuing..."
        
    - name: Run basic Django tests
      run: |
        python manage.py test --settings=drone_debug.settings --verbosity=2 --keepdb
        
    - name: Check for security issues (non-blocking)
      run: |
        python manage.py check --deploy --fail-level ERROR --settings=drone_debug.settings || echo "Security check had warnings, but continuing..."

  # Deploy job commented out until HEROKU_API_KEY secret is configured
  # deploy:
  #   needs: test
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   
  #   steps:
  #   - uses: actions/checkout@v4
  #   
  #   - name: Deploy to Heroku
  #     uses: akhileshns/heroku-deploy@v3.12.14
  #     with:
  #       heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
  #       heroku_app_name: "custom-drone-ddeveloper72"
  #       heroku_email: "duncan.niamh@gmail.com"
  #       usedocker: false